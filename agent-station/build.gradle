/* Agent Station environment for static and mobile software agents
 * Copyright (C) 2022  Dr Christos Bohoris
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 * connectina.co.uk/agent-station
 */

plugins {
    id 'application'
    id 'com.google.protobuf' version '0.8.19'
    id 'jacoco'
    id "org.sonarqube" version "3.4.0.2513"
    id 'maven-publish'
    id 'signing'
}

ext.getBuildVersion = { ->
    Process process = "git rev-list --count HEAD".execute([], project.rootDir)
    def commitCount = process.getText().trim() 

    project.version = project.app_version + "." + commitCount
}

signing {
    sign configurations.archives
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

artifacts {
    archives jar, javadocJar
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    
    reports {
        xml.required = true
    }
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                "uk/co/connectina/agentstation/api/grpc/*",
                "uk/co/connectina/agentstation/desktop/*"
            ])
        }))
    }
}

sonarqube { 
    properties { 
        property "sonar.coverage.exclusions", "**/agentstation/api/grpc/*,**/agentstation/desktop/*" 
    } 
}

javadoc {
  exclude "uk/co/connectina/agentstation/api/grpc/*",
          "uk/co/connectina/agentstation/desktop/*"
  source = sourceSets.main.allJava
}
javadoc.options.addStringOption('Xdoclint:none', '-quiet')

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {

    implementation project(':agent-station-client-api')

    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    // https://mvnrepository.com/artifact/org.mockito/mockito-core
    testImplementation 'org.mockito:mockito-core:4.8.0'

    // https://mvnrepository.com/artifact/org.mockito/mockito-junit-jupiter
    testImplementation 'org.mockito:mockito-junit-jupiter:4.8.0'

    // https://mvnrepository.com/artifact/commons-codec/commons-codec
    implementation 'commons-codec:commons-codec:1.15'

    // https://mvnrepository.com/artifact/com.h2database/h2
    implementation 'com.h2database:h2:2.1.214'

    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    implementation 'org.apache.logging.log4j:log4j-core:2.18.0'

    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api
    implementation 'org.apache.logging.log4j:log4j-api:2.18.0'

    // https://mvnrepository.com/artifact/com.github.weisj/darklaf-core
    implementation 'com.github.weisj:darklaf-core:3.0.1'

    // https://mvnrepository.com/artifact/info.picocli/picocli
    implementation 'info.picocli:picocli:4.6.3'

    if (JavaVersion.current().isJava9Compatible()) {
        // Workaround for @javax.annotation.Generated
        // see: https://github.com/grpc/grpc-java/issues/3633
        // https://mvnrepository.com/artifact/javax.annotation/javax.annotation-api
        implementation 'javax.annotation:javax.annotation-api:1.3.2'
    }

    // https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java
    implementation 'com.google.protobuf:protobuf-java:3.21.7'

    // https://mvnrepository.com/artifact/io.grpc/grpc-all
    implementation "io.grpc:grpc-all:${grpcVersion}"
    
    // https://mvnrepository.com/artifact/io.grpc/grpc-services
    runtimeOnly 'io.grpc:grpc-services:${grpcVersion}'

    // https://mvnrepository.com/artifact/io.netty/netty-handler
    implementation 'io.netty:netty-handler:4.1.84.Final'
  
    protobuf files("src/main/grpc")
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:3.21.6" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

application {
    // Define the main class for the application.
    mainClass = 'uk.co.connectina.agentstation.App'
}

java {
    withJavadocJar()
}

jar {
    getBuildVersion()
    manifest {
        attributes 'Main-Class': 'uk.co.connectina.agentstation.App'
        attributes 'Specification-Title': 'Agent Station'
        attributes 'Specification-Version': project.version
        attributes 'Specification-Vendor': 'Dr Christos Bohoris'
        attributes 'Implementation-Title': 'uk.co.connectina.agentstation'
        attributes 'Implementation-Version': project.version
        attributes 'Implementation-Vendor': 'Dr Christos Bohoris'
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

test.finalizedBy jacocoTestReport

task appInfo() {
    doLast {
        getBuildVersion()
        new File("$projectDir/src/main/resources/app.properties").text = String.format("app_name=Agent Station%napp_version=" + project.version)
    }
}
compileJava.dependsOn appInfo
