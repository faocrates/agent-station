/* Agent Station environment for static and mobile software agents
 * Copyright (C) 2022  Dr Christos Bohoris
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 * connectina.co.uk/agent-station
 */
package uk.co.connectina.agentstation.desktop;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;
import uk.co.connectina.agentstation.api.Permission;
import uk.co.connectina.agentstation.api.Identity;

/**
 * A dialog the allows the user to confirm the permissions of the agent to be added.
 *
 * @author Dr Christos Bohoris
 */
public class AgentPermissionDialog extends javax.swing.JDialog {

    private Permission permission = null;
    private final Identity id;
    private final String placeName;

    /**
     * Creates new form AgentPermissionDialog
     */
    public AgentPermissionDialog(java.awt.Frame parent, boolean modal, Identity id, String placeName) {
        super(parent, modal);
        this.id = id;
        this.placeName = placeName;
        setTitle("Pemission Request");
        initComponents();
        okButton.addActionListener(new OkListener());
        cancelButton.addActionListener(new CancelListener());
        IdentityTableModel idTableModel = new IdentityTableModel(id);
        idTable.setModel(idTableModel);

        allowedCheckBox.addActionListener(e -> {
            if (!allowedCheckBox.isSelected()) {
                autoStartCheckBox.setSelected(false);
            }
            autoStartCheckBox.setEnabled(allowedCheckBox.isSelected());
        });
        allowedCheckBox.setSelected(true);
        
        pack();
        setLocationRelativeTo(parent);
    }

    public Permission display() {
        setVisible(true);

        return permission;
    }

    public class OkListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent event) {

            String message = null;
            if (allowedCheckBox.isSelected() && autoStartCheckBox.isSelected()) {
                message = "The agent will be allowed and\nits task will start automatically.";
            } else if (allowedCheckBox.isSelected() && !autoStartCheckBox.isSelected()) {
                message = "The agent will be allowed but\nits task will not start automatically.";
            } else if (!allowedCheckBox.isSelected()) {
                message = "The agent will not be allowed.";
            }
            int response = JOptionPane.showConfirmDialog(AgentPermissionDialog.this, message, "Confirm", JOptionPane.YES_NO_OPTION);
            if (response == JOptionPane.NO_OPTION) {
                
                return;
            } else if (response == JOptionPane.YES_OPTION) {
                permission = new Permission(id.getName(), null, placeName, allowedCheckBox.isSelected(), autoStartCheckBox.isSelected());
            }
            
            setVisible(false);
            dispose();
        }

    }

    public class CancelListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent event) {
            int response = JOptionPane.showConfirmDialog(AgentPermissionDialog.this, "The agent will not be allowed.", "Confirm", JOptionPane.YES_NO_OPTION);
            if (response == JOptionPane.NO_OPTION) {
                
                return;
            }
            
            setVisible(false);
            dispose();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        javax.swing.JPanel mainPanel = new javax.swing.JPanel();
        javax.swing.JScrollPane idScrollPane = new javax.swing.JScrollPane();
        idTable = new javax.swing.JTable();
        javax.swing.JPanel optionPanel = new javax.swing.JPanel();
        allowedCheckBox = new javax.swing.JCheckBox();
        autoStartCheckBox = new javax.swing.JCheckBox();
        javax.swing.JPanel controlPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        mainPanel.setPreferredSize(new java.awt.Dimension(700, 350));
        mainPanel.setLayout(new java.awt.BorderLayout());

        idScrollPane.setViewportView(idTable);

        mainPanel.add(idScrollPane, java.awt.BorderLayout.CENTER);

        optionPanel.setLayout(new java.awt.GridBagLayout());

        allowedCheckBox.setText("Allow this agent to perform its task");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(11, 12, 11, 11);
        optionPanel.add(allowedCheckBox, gridBagConstraints);

        autoStartCheckBox.setText("Automatically start the task");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 11, 11);
        optionPanel.add(autoStartCheckBox, gridBagConstraints);

        mainPanel.add(optionPanel, java.awt.BorderLayout.SOUTH);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        controlPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(6, 12, 11, 11));
        controlPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        okButton.setText("OK");
        controlPanel.add(okButton);

        cancelButton.setText("Cancel");
        controlPanel.add(cancelButton);

        getContentPane().add(controlPanel, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox allowedCheckBox;
    private javax.swing.JCheckBox autoStartCheckBox;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTable idTable;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables
}
